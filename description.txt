--------------
Overview
--------------
This is just some loose organization of my thoughts about what could be done.

Name: Python Doesn't Byte: An Intro to the Programming Language Used by Netflix, Google, NASA, and More!

Description: Fundamental programming language concepts such as data types and loops will be introduced using the Python programming language. After this brief introduction, students will get right to a project and will design and then code their own unique text-based adventure game! Learn to code and let your creativity run wild in this Python programming language crash course!

--------------
Core Concepts
--------------

Data Types
Variables
Functions
Loops
Modules ... probably won't include but maybe random module for dice rolling?

--------------
Time Breakdown
--------------

Intro: 15-20 min
Project: 45 min

What would be the best way to teach students about inputs, outputs, and control
structures? A text based adventure. Could be used to teach object oriented 
or functional concepts. For example, a person might define a monster class
and a player class, then instantiate those classes during the text based game and manipulate them with their own story logic.

They won't be able to write these classes this quickly.... need to simplify

```
class Player:
	def __init__(self, name):
		pass

	def attack(self, ):
		"""Strength based solution."""
		pass

	def charm(self, ):
		"""Charisma based solution."""
		pass

	def solve(self, ):
		"""Intelligence based solution"""
		pass

class Monster:
	def __init__(self, name):
		pass

	def attack(self,):
		pass

def main():
	while not player_defeated and not end_game:
		# get inputs 
		pass

if __name__ == "__main__":
	main()

# Essentially a count based loop
# A while loop that uses more complicated conditions

# Initialize loop variables
rainy = False
num_times_loop_repeated = 0

# Loop condition
while(not rainy):

    # Body of loop
    print("It's not rainy today!!")

    ## Update loop variables
    # Increment the counter variable by 1
    num_times_loop_repeated = num_times_loop_repeated + 1

    # Check to see if the counter exceeds a certain condition
    if (num_times_loop_repeated > 4):

        # Update the other loop variable... remember there are actually
        # two loop variables for this `while` loop
        rainy = True

        # Print something fun :)
        print("It's raining now!!")
```


